classdef v010_AlphaRelease < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        DPOAEAnalyzerUIFigure    matlab.ui.Figure
        ImportFileButton         matlab.ui.control.Button
        RunButton                matlab.ui.control.Button
        UITable                  matlab.ui.control.Table
        DownloadButton           matlab.ui.control.Button
        TextArea                 matlab.ui.control.TextArea
        LoadedFileTextAreaLabel  matlab.ui.control.Label
        LoadedFileTextArea       matlab.ui.control.TextArea
    end

    
    properties (Access = private)
        completedataraw;    % variable storage - used to transfer the complete .cvs from Import to Run
        DP_Call;            % variable storage - used to transfer final table from Run to Table
        Points;             % variable storage - used to transfer number from user to change Run
        message1cell;       % variable storage - used to transfer the message about testing info to the excel spreadsheet
        runbuttonruntime;   % variable storage - used to store the time from when Run button is clicked till table is displayed 
        runbuttontime;      % variable storage - used to store time at which Run button was pressed
        displaypath;        % variable storage - stores file path from Import to Run, changes when Import is pressed
        displaypath2;       % variable storage - stores file path from Run to Download, changes when Run is pressed
    end


    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: ImportFileButton
        function ImportFileButtonPushed(app, event)
         
        % this function imports the .csv file
        % and gives an error if no .csv file is selected
            [fileName, pathwayName] = uigetfile('*.csv');                                           % imports data file
            try
                completedataraw = readtable(fullfile(pathwayName,fileName));                        % reads info from .csv file and stores as variable
                app.completedataraw = completedataraw;                                              % stores as app-wide variable
                displaypath = fullfile(pathwayName, fileName);                                      % gets file path of loaded .csv
                app.LoadedFileTextArea.Value = displaypath;                                         % changes the value on the Loaded File text box
                app.displaypath = displaypath;                                                      % stores for Run
            catch 
                warning('Select a DPOAE .csv file generated by BioSigRZ.')                          % warning message triggered by now .csv file
            end
                      
        end

        % Button pushed function: RunButton
        function RunButtonPushed(app, event)
            
            tic                                                                                     % timing begins for Run Button press
            format longG;                                                                           % format change                                                 
            t = now;                                                                                % gets date/time recording when Run Button was pressed
            d = datetime(t, 'ConvertFrom', 'datenum');                                              % converts to date format
            dchar = char(d);                                                                        % necessary data type conversion to char        
            testtime = sprintf('Test time: %s.', dchar);                                            % stores message w/ datetime into string
            testtimecell = {testtime};                                                              % necessary data type conversion to cell
            app.runbuttontime = testtimecell;                                                       % stored in app-wide variable
            displaypath2 = app.displaypath;                                                         % changes over so only changes when Run is pressed
            displaypath2str = sprintf('Imported Data File: %s', displaypath2);                      % creates string/sentence
            displaypath2cell = {displaypath2str};                                                   % data type conversion to cell
            app.displaypath2 = displaypath2cell;                                                    % remembers it for Download           
            completedataraw = app.completedataraw;                                                  % brought in from previous section
            Thresholdmet2 = [];                                                                     % setting up variables for for loop
            Thresholdmet3 = [];                                                                     % empty brackets needed by MATLAB
            CDDP = [];
            CDDPcolumncollection = [];
            previouscolumncollection = [];
            nextcolumncollection = [];
            potentialDPOAEcollection = [];
            surroundingavgcollection = [];
            surroundingstdcollection = [];
            threshold2collection = [];
            threshold3collection = [];
            Separation = 2;                                                                         % how many values the noise floor "skips" on either side of the DP
            Points = 10;                                                                            % how many points on each side of DP are averaged
            frequencystep = 97656.3/2048;                                                           % total frequency / .csv columns
            
            % If the .csv file isn't the correct format, an error will occur.
            % Must be the correct column amount bc code is based on columns
            % being correct. 
            [totalrowscompletedata, totalcolumnscompletedata] = size(app.completedataraw);          % extracts row and column info from .csv
            inputerror = ['Input incompatible. Input should be a .csv file '...                     % gives error if it isn't the correct .csv size
                        'with 2097 columns.'];
            
            if totalcolumnscompletedata == 2097                                                     % beggining of error trigger, for potential wrong .csv file pick
                dB_Level = str2double(completedataraw.(13)(2:totalrowscompletedata));               % extracts dB level column
                Frequency = str2double(completedataraw.(14)(2:totalrowscompletedata));              % extracts frequency column
        
                for n = 2:length(dB_Level)+1                                                        % for loops down whole .csv file
                    CDDPraw = completedataraw(:, 28);                                               % starting at 2nd row      
                    CDDPvalueraw = CDDPraw(n, 1);                                                   % CDDPvalue = freq of DP
                    CDDPvalue = str2double(CDDPvalueraw.(1));                                       % data type conversion
                    CDDP = [CDDP CDDPvalue];                                                        % troubleshooting storage
        
                    CDDPcolumnraw = CDDPvalue/frequencystep;                                        % finds column of DP, with decimal
                    CDDPcolumn = round(CDDPcolumnraw)+49;                                           % rounds the column
                    CDDPcolumncollection = [CDDPcolumncollection CDDPcolumn];                       % troubleshooting storage
                    
                    potentialDPOAEraw = completedataraw(:, CDDPcolumn);                             % gets DP value from variable
                    potentialDPOAEvalueraw = potentialDPOAEraw(n, 1);                               % data type conversion     
                    potentialDPOAE = potentialDPOAEvalueraw.(1);                                    % variable rename
                    potentialDPOAEcollection = [potentialDPOAEcollection potentialDPOAE];           % troubleshooting storage
        
                    % The following lines get the avg of the data around the DP, and
                    % calculate the 1st std. dev. 
                    previous = completedataraw{n, (CDDPcolumn-(Points + Separation):...             % extracts 10 columns previous to DP, not including 2 closest
                        CDDPcolumn-(Separation+1))}; 
                    previouscolumncollection = [previouscolumncollection (CDDPcolumn-(Points+Separation):...    % troubleshooting storage
                        CDDPcolumn-(Separation+1))];
                    next = completedataraw{n, (CDDPcolumn+(Separation+1):CDDPcolumn+...             % extracts 10 columns after DP, not including 2 closest
                        (Points+Separation))};
                    nextcolumncollection = [nextcolumncollection (CDDPcolumn+(Separation+1)):(CDDPcolumn+...    % troubleshooting storage
                        (Points+Separation))];
                    surrounding = [previous, next];                                                 % adds both into one big array
                    surroundingavg = mean(surrounding);                                             % takes average of data set
                    surroundingavgcollection = [surroundingavgcollection surroundingavg];           % troubleshooting storage
                    surroundingstd = std(surrounding);                                              % takes standard devation of the data set
                    surroundingstdcollection = [surroundingstdcollection surroundingstd];           % troubleshooting storage
        
                    % Finding the 2nd and 3rd std. dev. thresholds
                    threshold2 = surroundingavg + (2*surroundingstd);                               % computes 2nd standard deviation of surrounding 20                                           
                    % threshold3 = surroundingavg + (3*surroundingstd);
        
                    % if/else statements see if the threshold is above 2/3 std. dev.
                    if potentialDPOAE >= threshold2                                                 % sees if the DP is > 2 std. dev. above noise floor
                        CubicDifferenceDP2 = true;                                                  % assigns 1 to DP
                    else
                        CubicDifferenceDP2 = false;                                                 % assigns 0 to DP
                    end
        
                    % It was determined that 3rd std. dev. isn't that
                    % useful in determining the DP, as it was overly
                    % restrictive. 
                    % if potentialDPOAE >= threshold3      
                    % CubicDifferenceDP3 = true;
                    % else
                    % CubicDifferenceDP3 = false;
                    % end
        
                    Thresholdmet2 = [Thresholdmet2 CubicDifferenceDP2];                             % Collects threshold into array 
                    threshold2collection = [threshold2collection threshold2];                       % troubleshooting storage
                    % Thresholdmet3 = [Thresholdmet3 CubicDifferenceDP3];
                    % threshold3collection = [threshold3collection threshold3];
        
        
                end
        
                % Uncomment code below to give insight to the internal steps of the
                % program, specifically the for loop. Use to troubleshoot. So far,
                % most errors have surrounding MATLAB data type incompatabilities. 
        
%                 CDDP
%                 CDDPcolumncollection(1)
%                 previouscolumncollection(1:53)
%                 nextcolumncollection(1:53)
%                 potentialDPOAEcollection
%                 surroundingavgcollection
%                 surroundingstdcollection
%                 threshold2collection
%                 threshold3collection
%                 Thresholdmet2
%                 Thresholdmet3
        
                % Printing the final table, where 1 = above threshold.
                % Two thresholds correspond to the 2/3 std. dev. levels.
%                 ThreeStdDev_Threshold = Thresholdmet3';
                Significance_Threshold = Thresholdmet2';                                            % flips array from horizontal to vertical
                testtimecell                                                                        % prints test time 
                DP_Call = table(Frequency, dB_Level, Significance_Threshold)                        % prints table in command window
                app.DP_Call = DP_Call;                                                              % stores in app-wide variable
                
                % Prints a message underneath the table to help new users. 
                message1 = ['1 indicates the prescence of a DP, while 0 indicates '...
                    'its abscence. \n\nStandard deviation threshold is '...
                    'with respect to the noise floor.\nThe noise floor is created '...
                    'by averaging %d values on either \nside of the DP frequency, '...
                    'not including the %d values immediately\nto either side of the DP.'];
                message1complete = sprintf(message1, Points, Separation)                            % prints message
                message1cell = {message1complete};                                                  % data type conversion to cell
                app.message1cell = message1cell;                                                    % stores in app-wide variable
                
                % Printing the DP_Call Table to the Output Table
                app.UITable.Data = DP_Call;                                                         % stores in app-wide variable
                
                % Prints the processing time to the Metadata sheet
                runbuttonruntimeraw = toc;                                                          % timing ends here
                runbuttonruntime = sprintf('Runtime was %f seconds.\t', runbuttonruntimeraw);       % creating string with run time 
                runbuttonruntimecell = {runbuttonruntime}                                           % data type conversion to cell
                app.runbuttonruntime = runbuttonruntimecell;                                        % transfer variable to DownloadButtonPushed
                
            else
                warning(inputerror)                                                                 % error trigger (see above)
            end
        
        end

        % Button pushed function: DownloadButton
        function DownloadButtonPushed(app, event)
            
            A = app.DP_Call;                                                                        % loading variables
            B = app.message1cell;
            D = app.runbuttonruntime;
            E = app.runbuttontime;
            F = app.displaypath2;
            flag1 = true;                                                                           % starts flag system, seen later
            [file,path] = uiputfile('*.xlsx');                                                      % prompting save location
            fileName2 = fullfile(path,file);                                                        % defines path into a variable
            C = fullfile(path,file);                                                                % variable for RemoveSheet123 function
            warning('off' , 'MATLAB:xlswrite:AddSheet');                                            % Disables "Warning:Added specified sheet" that is expected
            
            % the below error catch is designed to prevent crashing when
            % user fails to import a .csv or click "Run" before clicking
            % "Download." Note flag1 structure, designed to prevent 2
            % errors from showing when only 1 has occurred. 
            try
                writetable(A, fileName2, 'FileType', 'spreadsheet', 'Sheet', 'Data');                           % Writes the table and
                writecell(B, fileName2, 'FileType', 'spreadsheet', 'Sheet', 'Metadata', 'Range', 'A1');         % the metadata text  
                writecell(E, fileName2, 'FileType', 'spreadsheet', 'Sheet', 'Metadata', 'Range', 'A2');         % date/time of test 
                writecell(D, fileName2, 'FileType', 'spreadsheet', 'Sheet', 'Metadata', 'Range', 'A3');         % run time      
                writecell(F, fileName2, 'FileType', 'spreadsheet', 'Sheet', 'Metadata', 'Range', 'A4');         % the file name
            catch 
                warning('Import a .csv file and then click "Run" before attempting to download the results.')   % warning text, if a .csv isnt loaded
                flag1 = false;                                                                                  % flag1 = false blocks a second error
            end
            
            % the below error catch will test the RemoveSheet123 function.
            % it will only do this if there is no error importing the file.
            % this is a separate error test, as Mac users will have issues
            % with RemoveSheet123 function. Note flag1 structure.
            
            
            if flag1 == true                                                                                % only runs if there is a correct .csv file
                try
                    RemoveSheet123(C)                                                                       % function by Noam Greenboim. Citation in README.txt
                catch
                    warning(['Mac systems will have 3 default sheets inserted into the .xlsx file. ' ...    % warning message about Mac computers taking
                        'This is due to an error in MATLAB code function.'])                                % issue with RemoveSheet123() function
                end      
            end
     
        end

        % Value changed function: LoadedFileTextArea
        function Import_Filename_TextArea_ValueChanged(app, event)
            
            % Mostly here as a placeholder, because the value is changed by
            % the line of text above that changes
            % app.LoadedFileTextArea.Value to app.displaypath
            value = app.LoadedFileTextArea.Value;
                                   
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create DPOAEAnalyzerUIFigure and hide until all components are created
            app.DPOAEAnalyzerUIFigure = uifigure('Visible', 'off');
            app.DPOAEAnalyzerUIFigure.Color = [0.902 0.902 0.902];
            app.DPOAEAnalyzerUIFigure.Position = [100 100 1192 938];
            app.DPOAEAnalyzerUIFigure.Name = 'DPOAE Analyzer';

            % Create ImportFileButton
            app.ImportFileButton = uibutton(app.DPOAEAnalyzerUIFigure, 'push');
            app.ImportFileButton.ButtonPushedFcn = createCallbackFcn(app, @ImportFileButtonPushed, true);
            app.ImportFileButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.ImportFileButton.FontName = 'Gill Sans MT';
            app.ImportFileButton.FontSize = 40;
            app.ImportFileButton.FontWeight = 'bold';
            app.ImportFileButton.Position = [20 731 500 200];
            app.ImportFileButton.Text = 'Import File';

            % Create RunButton
            app.RunButton = uibutton(app.DPOAEAnalyzerUIFigure, 'push');
            app.RunButton.ButtonPushedFcn = createCallbackFcn(app, @RunButtonPushed, true);
            app.RunButton.BackgroundColor = [0.6353 0.0784 0.1843];
            app.RunButton.FontName = 'Gill Sans MT';
            app.RunButton.FontSize = 50;
            app.RunButton.FontWeight = 'bold';
            app.RunButton.FontColor = [1 1 1];
            app.RunButton.Position = [20 248 500 200];
            app.RunButton.Text = 'Run';

            % Create UITable
            app.UITable = uitable(app.DPOAEAnalyzerUIFigure);
            app.UITable.ColumnName = {'Frequency'; 'dB Level'; 'Significance Threshold'};
            app.UITable.RowName = {};
            app.UITable.FontName = 'Gill Sans MT';
            app.UITable.Position = [536 19 638 912];

            % Create DownloadButton
            app.DownloadButton = uibutton(app.DPOAEAnalyzerUIFigure, 'push');
            app.DownloadButton.ButtonPushedFcn = createCallbackFcn(app, @DownloadButtonPushed, true);
            app.DownloadButton.BackgroundColor = [0.6706 0.2745 0.1059];
            app.DownloadButton.FontName = 'Gill Sans MT';
            app.DownloadButton.FontSize = 50;
            app.DownloadButton.FontWeight = 'bold';
            app.DownloadButton.FontColor = [1 1 1];
            app.DownloadButton.Position = [20 19 500 200];
            app.DownloadButton.Text = 'Download';

            % Create TextArea
            app.TextArea = uitextarea(app.DPOAEAnalyzerUIFigure);
            app.TextArea.Editable = 'off';
            app.TextArea.FontName = 'Gill Sans MT';
            app.TextArea.FontSize = 14;
            app.TextArea.BackgroundColor = [0.902 0.902 0.902];
            app.TextArea.Position = [20 593 500 124];
            app.TextArea.Value = {'The purpose of this program is to compute whether a DPOAE is to be called or not. It does this by analyzing the rows and columns of the .csv file generated by BioSigRZ. This version takes 10 points from either side of the DP, starting 2 points away from the DP on each side. It then averages them, and analyzes whether the DP is significantly different from the noise floor. '; ''; '1 indicates the presence of a DP, and 0 its absence. '};

            % Create LoadedFileTextAreaLabel
            app.LoadedFileTextAreaLabel = uilabel(app.DPOAEAnalyzerUIFigure);
            app.LoadedFileTextAreaLabel.HorizontalAlignment = 'center';
            app.LoadedFileTextAreaLabel.FontName = 'Gill Sans MT';
            app.LoadedFileTextAreaLabel.FontSize = 24;
            app.LoadedFileTextAreaLabel.FontWeight = 'bold';
            app.LoadedFileTextAreaLabel.Position = [20 523 160 60];
            app.LoadedFileTextAreaLabel.Text = 'Loaded File:';

            % Create LoadedFileTextArea
            app.LoadedFileTextArea = uitextarea(app.DPOAEAnalyzerUIFigure);
            app.LoadedFileTextArea.ValueChangedFcn = createCallbackFcn(app, @Import_Filename_TextArea_ValueChanged, true);
            app.LoadedFileTextArea.Editable = 'off';
            app.LoadedFileTextArea.FontName = 'Gill Sans MT';
            app.LoadedFileTextArea.Position = [179 523 341 60];

            % Show the figure after all components are created
            app.DPOAEAnalyzerUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = v010_AlphaRelease

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.DPOAEAnalyzerUIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.DPOAEAnalyzerUIFigure)
        end
    end
end